/**
 * @fileoverview gRPC-Web generated client stub for todoPackage
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: todo.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.todoPackage = require('./todo_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.todoPackage.TodoClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.todoPackage.TodoPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.todoPackage.TodoText,
 *   !proto.todoPackage.TodoItem>}
 */
const methodDescriptor_Todo_createTodo = new grpc.web.MethodDescriptor(
  '/todoPackage.Todo/createTodo',
  grpc.web.MethodType.UNARY,
  proto.todoPackage.TodoText,
  proto.todoPackage.TodoItem,
  /**
   * @param {!proto.todoPackage.TodoText} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.todoPackage.TodoItem.deserializeBinary
);


/**
 * @param {!proto.todoPackage.TodoText} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.todoPackage.TodoItem)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.todoPackage.TodoItem>|undefined}
 *     The XHR Node Readable Stream
 */
proto.todoPackage.TodoClient.prototype.createTodo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/todoPackage.Todo/createTodo',
      request,
      metadata || {},
      methodDescriptor_Todo_createTodo,
      callback);
};


/**
 * @param {!proto.todoPackage.TodoText} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.todoPackage.TodoItem>}
 *     Promise that resolves to the response
 */
proto.todoPackage.TodoPromiseClient.prototype.createTodo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/todoPackage.Todo/createTodo',
      request,
      metadata || {},
      methodDescriptor_Todo_createTodo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.todoPackage.TodoItem,
 *   !proto.todoPackage.TodoItem>}
 */
const methodDescriptor_Todo_updateTodoById = new grpc.web.MethodDescriptor(
  '/todoPackage.Todo/updateTodoById',
  grpc.web.MethodType.UNARY,
  proto.todoPackage.TodoItem,
  proto.todoPackage.TodoItem,
  /**
   * @param {!proto.todoPackage.TodoItem} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.todoPackage.TodoItem.deserializeBinary
);


/**
 * @param {!proto.todoPackage.TodoItem} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.todoPackage.TodoItem)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.todoPackage.TodoItem>|undefined}
 *     The XHR Node Readable Stream
 */
proto.todoPackage.TodoClient.prototype.updateTodoById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/todoPackage.Todo/updateTodoById',
      request,
      metadata || {},
      methodDescriptor_Todo_updateTodoById,
      callback);
};


/**
 * @param {!proto.todoPackage.TodoItem} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.todoPackage.TodoItem>}
 *     Promise that resolves to the response
 */
proto.todoPackage.TodoPromiseClient.prototype.updateTodoById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/todoPackage.Todo/updateTodoById',
      request,
      metadata || {},
      methodDescriptor_Todo_updateTodoById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.todoPackage.Void,
 *   !proto.todoPackage.Todos>}
 */
const methodDescriptor_Todo_readTodos = new grpc.web.MethodDescriptor(
  '/todoPackage.Todo/readTodos',
  grpc.web.MethodType.UNARY,
  proto.todoPackage.Void,
  proto.todoPackage.Todos,
  /**
   * @param {!proto.todoPackage.Void} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.todoPackage.Todos.deserializeBinary
);


/**
 * @param {!proto.todoPackage.Void} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.todoPackage.Todos)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.todoPackage.Todos>|undefined}
 *     The XHR Node Readable Stream
 */
proto.todoPackage.TodoClient.prototype.readTodos =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/todoPackage.Todo/readTodos',
      request,
      metadata || {},
      methodDescriptor_Todo_readTodos,
      callback);
};


/**
 * @param {!proto.todoPackage.Void} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.todoPackage.Todos>}
 *     Promise that resolves to the response
 */
proto.todoPackage.TodoPromiseClient.prototype.readTodos =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/todoPackage.Todo/readTodos',
      request,
      metadata || {},
      methodDescriptor_Todo_readTodos);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.todoPackage.TodoId,
 *   !proto.todoPackage.TodoItem>}
 */
const methodDescriptor_Todo_readTodoById = new grpc.web.MethodDescriptor(
  '/todoPackage.Todo/readTodoById',
  grpc.web.MethodType.UNARY,
  proto.todoPackage.TodoId,
  proto.todoPackage.TodoItem,
  /**
   * @param {!proto.todoPackage.TodoId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.todoPackage.TodoItem.deserializeBinary
);


/**
 * @param {!proto.todoPackage.TodoId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.todoPackage.TodoItem)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.todoPackage.TodoItem>|undefined}
 *     The XHR Node Readable Stream
 */
proto.todoPackage.TodoClient.prototype.readTodoById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/todoPackage.Todo/readTodoById',
      request,
      metadata || {},
      methodDescriptor_Todo_readTodoById,
      callback);
};


/**
 * @param {!proto.todoPackage.TodoId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.todoPackage.TodoItem>}
 *     Promise that resolves to the response
 */
proto.todoPackage.TodoPromiseClient.prototype.readTodoById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/todoPackage.Todo/readTodoById',
      request,
      metadata || {},
      methodDescriptor_Todo_readTodoById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.todoPackage.TodoId,
 *   !proto.todoPackage.Void>}
 */
const methodDescriptor_Todo_deleteTodoById = new grpc.web.MethodDescriptor(
  '/todoPackage.Todo/deleteTodoById',
  grpc.web.MethodType.UNARY,
  proto.todoPackage.TodoId,
  proto.todoPackage.Void,
  /**
   * @param {!proto.todoPackage.TodoId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.todoPackage.Void.deserializeBinary
);


/**
 * @param {!proto.todoPackage.TodoId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.todoPackage.Void)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.todoPackage.Void>|undefined}
 *     The XHR Node Readable Stream
 */
proto.todoPackage.TodoClient.prototype.deleteTodoById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/todoPackage.Todo/deleteTodoById',
      request,
      metadata || {},
      methodDescriptor_Todo_deleteTodoById,
      callback);
};


/**
 * @param {!proto.todoPackage.TodoId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.todoPackage.Void>}
 *     Promise that resolves to the response
 */
proto.todoPackage.TodoPromiseClient.prototype.deleteTodoById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/todoPackage.Todo/deleteTodoById',
      request,
      metadata || {},
      methodDescriptor_Todo_deleteTodoById);
};


module.exports = proto.todoPackage;

